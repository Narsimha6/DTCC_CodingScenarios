package com.assignment.chat.server.test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import org.junit.Before;
import org.junit.Test;
import org.junit.internal.runners.statements.Fail;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import com.assignment.chat.client.Client;
import com.assignment.chat.server.Server;

import static org.mockito.Mockito.*;

@RunWith(JUnit4.class)
public class ServerTest {
	
	@Mock
	private ServerSocket mockServerSocket;
	
	@Mock
	private Client clientChat;
	
	@Mock
	private Server serverChat;
	
	@Mock
	private Socket mockTestClientSocket;

	@Before
	public void init() {
	    serverChat = new Server(1500);
	}
	
	  @Test public void testStart() {
		  
		  try {
			  
			mockTestClientSocket = mock(Socket.class);
			when(mockServerSocket.accept()).thenReturn(mockTestClientSocket);
			// Using Mockito
	        final Socket socket = mock(Socket.class);
	        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
	        when(socket.getOutputStream()).thenReturn(byteArrayOutputStream);

	        serverChat.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	  }
	  
}
