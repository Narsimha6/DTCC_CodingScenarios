package com.assignment.chat.server.test;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import org.junit.Before;
import org.junit.Test;
import org.junit.internal.runners.statements.Fail;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;

import com.assignment.chat.client.Client;
import com.assignment.chat.server.Server;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ServerTest {
	
	@Mock
	private ServerSocket mockServerSocket;
	
	@Mock
	private Client clientChat;
	
	@Mock
	private Server serverChat;
	
	@Mock
	private Socket mockTestClientSocket;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
		mockTestClientSocket = mock(Socket.class);
	    mockServerSocket = mock(ServerSocket.class);
	    serverChat = new Server(1500);
	    clientChat = new Client("localhost", 1500, "testing");
	    
	    try {
	    	when(mockServerSocket.accept()).thenReturn(mockTestClientSocket);
	    } catch (IOException e) {
	    }
	}
	
	  @Test public void testStart() {
		  
		  try {
			  
			mockTestClientSocket = mock(Socket.class);
			when(mockServerSocket.accept()).thenReturn(mockTestClientSocket);
			serverChat.start();
			clientChat.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	  }
	  
}
