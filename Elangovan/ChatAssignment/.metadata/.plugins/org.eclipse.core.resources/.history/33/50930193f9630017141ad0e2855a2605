package com.assignment.chat.server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	
	ServerSocket serverSocket;
    Socket connection; // connection-to-client
    ObjectOutputStream output;
    ObjectInputStream input;
    
    public void run() {
    	
        try {
            serverSocket = new ServerSocket(6000, 100);
        } catch (IOException e) {
            System.err.println("Invalid port number");
        }
        while (true) {
            try {
                waitForConnection();
                getIOStreams();
                processConnection();
            } finally {
                closeConnection();
            }
        }
    }
    
    public void waitForConnection() {
    	
        System.out.println("Server is ready to accept conenctions");
        
        try {
            connection = serverSocket.accept(); // code will stop here until a connection occurs
            System.out.println("Conenction established with the client");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public void closeConnection() {
    	
        try {
        	
            input.close();
            output.close();
            connection.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

	public static void main(String[] args) throws Exception {
		
      ServerSocket sersock = new ServerSocket(3000);
      System.out.println("Server  ready for chatting");
      Socket sock = sersock.accept( );                          
                              // reading from keyboard (keyRead object)
      BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));
	                      // sending to client (pwrite object)
      OutputStream ostream = sock.getOutputStream(); 
      PrintWriter pwrite = new PrintWriter(ostream, true);

                              // receiving from server ( receiveRead  object)
      InputStream istream = sock.getInputStream();
      BufferedReader receiveRead = new BufferedReader(new InputStreamReader(istream));

      String receiveMessage, sendMessage;               
      while(true)
      {
        if((receiveMessage = receiveRead.readLine()) != null)  
        {
           System.out.println(receiveMessage);         
        }         
        sendMessage = keyRead.readLine(); 
        pwrite.println(sendMessage);             
        pwrite.flush();
      }               
    }                    
}                        